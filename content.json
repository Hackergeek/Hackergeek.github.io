{"meta":{"title":"知用改创的个人博客","subtitle":"世上无难事，只怕有心人","description":"Android相关技术知识","author":"知用改创","url":"https://hackergeek.github.io"},"pages":[{"title":"","date":"2018-03-31T16:51:08.227Z","updated":"2018-03-31T16:51:08.227Z","comments":false,"path":"categories/index.html","permalink":"https://hackergeek.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-03-31T16:50:55.876Z","updated":"2018-03-31T16:50:55.876Z","comments":false,"path":"tags/index.html","permalink":"https://hackergeek.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"浅谈Android文件管理器的几种实现方式（源码篇）","slug":"2018-4-14","date":"2018-04-14T08:36:44.241Z","updated":"2018-04-14T11:49:04.300Z","comments":true,"path":"2018/04/14/2018-4-14/","link":"","permalink":"https://hackergeek.github.io/2018/04/14/2018-4-14/","excerpt":"","text":"浅谈Android文件管理器的几种实现方式（源码篇）功能实现 基本文件操作：新建、复制、粘贴、剪切和删除等操作 文件检索 文件收藏 文件分类 添加桌面快捷方式 主题换色 效果图 文件列表 Android简单文件管理器源码参考资料浅谈Android文件管理器的几种实现方式原理篇","categories":[],"tags":[]},{"title":"控制日志输出","slug":"2018-3-31","date":"2018-03-31T15:09:52.704Z","updated":"2018-04-01T05:50:17.094Z","comments":true,"path":"2018/03/31/2018-3-31/","link":"","permalink":"https://hackergeek.github.io/2018/03/31/2018-3-31/","excerpt":"","text":"背景在编写代码的时候，我们常常需要加入一些代码来输出日志，从而达到调试的目的。但是，当程序基本编写完成的时候，我们就会纠结于究竟要不要去掉那些用于输出日志的无用代码。 去掉的话，又担心当程序出问题的时候，又要重新加入那些代码来调试，而且删除输出日志的代码也不是一件轻松的事情。 不去掉的话，那些输出日志的代码在程序没出问题的情况下又会显得有点多余。 控制日志输出我们可以通过使用控制语句来控制日志输出，下面的代码分别使用布尔型常量和布尔型变量来控制日志输出： Main.java 那么使用布尔型常量和布尔型变量控制日志输出有什么区别呢？于是，我就去查看Main.java编译生成的字节码（进行反编译处理之后的字节码），如下图： Main.class 将编译生成的字节码和源码进行对比，你会发现由于DEBUG常量的值为true，也就是说第11行else语句块永远都不会执行，因此Java编译器就将它忽略掉，最终第9-13行的java代码编译生成第16行的字节码。 总结从上面的分析，我们可以得出以下结论： Java编译器在将java代码编译成java字节码的时候，会忽略掉那些永远都不可能执行的代码。 尽量使用静态布尔型常量来控制日志输出。","categories":[{"name":"Android","slug":"Android","permalink":"https://hackergeek.github.io/categories/Android/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://hackergeek.github.io/tags/Java/"},{"name":"Android","slug":"Android","permalink":"https://hackergeek.github.io/tags/Android/"}]},{"title":"快速配置Hexo","slug":"hello-world","date":"2018-03-31T14:57:04.421Z","updated":"2018-04-01T02:41:50.746Z","comments":true,"path":"2018/03/31/hello-world/","link":"","permalink":"https://hackergeek.github.io/2018/03/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartInstall Hexo1npm install hexo-cli -g Install hexo-deployer-git1npm install hexo-deployer-git --save Deploy1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Themeindigo 主题地址：https://github.com/yscoder/hexo-theme-indigo 演示网站：https://www.imys.net/ spfk 主题地址：https://github.com/luuman/hexo-theme-spfk 演示网站：https://luuman.github.io/ beantech 主题地址：https://github.com/YenYuHsuan/hexo-theme-beantech 演示网站：http://beantech.org/ archer 主题地址：https://github.com/fi3ework/hexo-theme-archer 演示网站：http://firework.studio/ claudia 主题地址：https://github.com/Haojen/hexo-theme-Claudia 演示网站：http://haojen.github.io/","categories":[],"tags":[]}]}